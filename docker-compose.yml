version: "3"
services:
  nginx:
    # labels:       # 为容器添加Docker元数据（metadata）信息
    image: nginx
    ports:          # ports用于映射端口的标签
      - "80:80"
    # extra_hosts:  #添加主机名的标签，会在/etc/hosts文件中添加一些记录
    #   - "somehost:162.242.195.82"
    container_name: "nginx"
    volumes:        # 挂载一个目录或者一个已存在的数据卷容器;[HOST:CONTAINER:ro]格式，后者对于容器来说，数据卷是只读的
      - ./nginx/html:/var/www/html/:rw
      - ./nginx/config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/logs:/var/log/nginx/:rw
      # - ./conf/localtime:/etc/localtime:ro
      #- ./conf/timezone:/etc/timezone:ro
    # env_file:     # 定义一个专门存放变量的文件；如果有变量名称与environment指令冲突，则以后者为准
    #   -
    # restart: always
    links:          # 容器之间可使用容器名称相互访问。如在nginx中可以通过 node:7001 访问到 node服务l。原理：links 当前在容器/etc/hosts里创建表：172.17.2.186 node；
      - node
    # environment:  # 容器中可以拿取到的变量值
    # command:      # 使用 command 可以覆盖容器启动后默认执行的命令
    networks:
      - default
  node:
    build:
      context: ./node
      dockerfile: Dockerfile
      # args:       # 添加构建参数，这些参数是仅在构建过程中可访问的环境变量
      #   ROOT_PATH: /var/www/project/nodeService
    container_name: "node"
    volumes:
      - ./node/eggFramework:/home/node_projiect
    # restart: always
    depends_on:     # depends_on 依赖其他容器，需其他容器启动完成后再启动本容器
      - mysql
    links:
      - mysql
    networks:
      - default
  mysql:
    image: mysql:5.7
    ports:
      - "3306"
    volumes:
      - "./mysql/conf/my.cnf:/etc/my.cnf"
      - "./mysql/init_sql_or_sh:/docker-entrypoint-initdb.d"  #！！！！！！重点： 此处必须是 文件夹映射到 docker-entrypoint-initdb.d，否则会报错 
      - "./mysql/database:/home/mysql_sql"
      - "./mysql/logs:/var/lib/mysql"     # /var/lib/mysql 日志目录，是在my.cnf里配置的
    container_name: "mysql"
    environment:
      MYSQL_ROOT_PASSWORD: "123456"
      INIT_DB_SHELL_PATH: "/home/mysql_sql"
    networks:
      - default
# 使用networks命令，即可方便实现服务间的网络隔离与连接。默认容器间都使用同一个网络，定义网络名为byfn，那么最终生产的网络名为：<当前路径名_byfn>
networks:
  default:
